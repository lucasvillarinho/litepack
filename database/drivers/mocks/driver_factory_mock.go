// Code generated by mockery v2.47.0. DO NOT EDIT.

package mocks

import (
	drivers "github.com/lucasvillarinho/litepack/database/drivers"
	mock "github.com/stretchr/testify/mock"
)

// DriverFactoryMock is an autogenerated mock type for the DriverFactory type
type DriverFactoryMock struct {
	mock.Mock
}

type DriverFactoryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *DriverFactoryMock) EXPECT() *DriverFactoryMock_Expecter {
	return &DriverFactoryMock_Expecter{mock: &_m.Mock}
}

// GetDriver provides a mock function with given fields: driverType, dsn
func (_m *DriverFactoryMock) GetDriver(driverType drivers.DriverType, dsn string) (drivers.Driver, error) {
	ret := _m.Called(driverType, dsn)

	if len(ret) == 0 {
		panic("no return value specified for GetDriver")
	}

	var r0 drivers.Driver
	var r1 error
	if rf, ok := ret.Get(0).(func(drivers.DriverType, string) (drivers.Driver, error)); ok {
		return rf(driverType, dsn)
	}
	if rf, ok := ret.Get(0).(func(drivers.DriverType, string) drivers.Driver); ok {
		r0 = rf(driverType, dsn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(drivers.Driver)
		}
	}

	if rf, ok := ret.Get(1).(func(drivers.DriverType, string) error); ok {
		r1 = rf(driverType, dsn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DriverFactoryMock_GetDriver_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDriver'
type DriverFactoryMock_GetDriver_Call struct {
	*mock.Call
}

// GetDriver is a helper method to define mock.On call
//   - driverType drivers.DriverType
//   - dsn string
func (_e *DriverFactoryMock_Expecter) GetDriver(driverType interface{}, dsn interface{}) *DriverFactoryMock_GetDriver_Call {
	return &DriverFactoryMock_GetDriver_Call{Call: _e.mock.On("GetDriver", driverType, dsn)}
}

func (_c *DriverFactoryMock_GetDriver_Call) Run(run func(driverType drivers.DriverType, dsn string)) *DriverFactoryMock_GetDriver_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(drivers.DriverType), args[1].(string))
	})
	return _c
}

func (_c *DriverFactoryMock_GetDriver_Call) Return(_a0 drivers.Driver, _a1 error) *DriverFactoryMock_GetDriver_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DriverFactoryMock_GetDriver_Call) RunAndReturn(run func(drivers.DriverType, string) (drivers.Driver, error)) *DriverFactoryMock_GetDriver_Call {
	_c.Call.Return(run)
	return _c
}

// NewDriverFactoryMock creates a new instance of DriverFactoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDriverFactoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *DriverFactoryMock {
	mock := &DriverFactoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
