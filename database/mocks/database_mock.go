// Code generated by mockery v2.47.0. DO NOT EDIT.

package mocks

import (
	context "context"

	drivers "github.com/lucasvillarinho/litepack/database/drivers"

	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// DatabaseMock is an autogenerated mock type for the Database type
type DatabaseMock struct {
	mock.Mock
}

type DatabaseMock_Expecter struct {
	mock *mock.Mock
}

func (_m *DatabaseMock) EXPECT() *DatabaseMock_Expecter {
	return &DatabaseMock_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields: ctx
func (_m *DatabaseMock) Close(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DatabaseMock_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type DatabaseMock_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - ctx context.Context
func (_e *DatabaseMock_Expecter) Close(ctx interface{}) *DatabaseMock_Close_Call {
	return &DatabaseMock_Close_Call{Call: _e.mock.On("Close", ctx)}
}

func (_c *DatabaseMock_Close_Call) Run(run func(ctx context.Context)) *DatabaseMock_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *DatabaseMock_Close_Call) Return(_a0 error) *DatabaseMock_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DatabaseMock_Close_Call) RunAndReturn(run func(context.Context) error) *DatabaseMock_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Destroy provides a mock function with given fields: ctx
func (_m *DatabaseMock) Destroy(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Destroy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DatabaseMock_Destroy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Destroy'
type DatabaseMock_Destroy_Call struct {
	*mock.Call
}

// Destroy is a helper method to define mock.On call
//   - ctx context.Context
func (_e *DatabaseMock_Expecter) Destroy(ctx interface{}) *DatabaseMock_Destroy_Call {
	return &DatabaseMock_Destroy_Call{Call: _e.mock.On("Destroy", ctx)}
}

func (_c *DatabaseMock_Destroy_Call) Run(run func(ctx context.Context)) *DatabaseMock_Destroy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *DatabaseMock_Destroy_Call) Return(_a0 error) *DatabaseMock_Destroy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DatabaseMock_Destroy_Call) RunAndReturn(run func(context.Context) error) *DatabaseMock_Destroy_Call {
	_c.Call.Return(run)
	return _c
}

// Exec provides a mock function with given fields: ctx, query, args
func (_m *DatabaseMock) Exec(ctx context.Context, query string, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ctx, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Exec")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) error); ok {
		r0 = rf(ctx, query, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DatabaseMock_Exec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exec'
type DatabaseMock_Exec_Call struct {
	*mock.Call
}

// Exec is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - args ...interface{}
func (_e *DatabaseMock_Expecter) Exec(ctx interface{}, query interface{}, args ...interface{}) *DatabaseMock_Exec_Call {
	return &DatabaseMock_Exec_Call{Call: _e.mock.On("Exec",
		append([]interface{}{ctx, query}, args...)...)}
}

func (_c *DatabaseMock_Exec_Call) Run(run func(ctx context.Context, query string, args ...interface{})) *DatabaseMock_Exec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *DatabaseMock_Exec_Call) Return(_a0 error) *DatabaseMock_Exec_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DatabaseMock_Exec_Call) RunAndReturn(run func(context.Context, string, ...interface{}) error) *DatabaseMock_Exec_Call {
	_c.Call.Return(run)
	return _c
}

// ExecWithTx provides a mock function with given fields: ctx, fn
func (_m *DatabaseMock) ExecWithTx(ctx context.Context, fn func(*sql.Tx) error) error {
	ret := _m.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for ExecWithTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(*sql.Tx) error) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DatabaseMock_ExecWithTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecWithTx'
type DatabaseMock_ExecWithTx_Call struct {
	*mock.Call
}

// ExecWithTx is a helper method to define mock.On call
//   - ctx context.Context
//   - fn func(*sql.Tx) error
func (_e *DatabaseMock_Expecter) ExecWithTx(ctx interface{}, fn interface{}) *DatabaseMock_ExecWithTx_Call {
	return &DatabaseMock_ExecWithTx_Call{Call: _e.mock.On("ExecWithTx", ctx, fn)}
}

func (_c *DatabaseMock_ExecWithTx_Call) Run(run func(ctx context.Context, fn func(*sql.Tx) error)) *DatabaseMock_ExecWithTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(*sql.Tx) error))
	})
	return _c
}

func (_c *DatabaseMock_ExecWithTx_Call) Return(_a0 error) *DatabaseMock_ExecWithTx_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DatabaseMock_ExecWithTx_Call) RunAndReturn(run func(context.Context, func(*sql.Tx) error) error) *DatabaseMock_ExecWithTx_Call {
	_c.Call.Return(run)
	return _c
}

// GetEngine provides a mock function with given fields: ctx
func (_m *DatabaseMock) GetEngine(ctx context.Context) drivers.Driver {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetEngine")
	}

	var r0 drivers.Driver
	if rf, ok := ret.Get(0).(func(context.Context) drivers.Driver); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(drivers.Driver)
		}
	}

	return r0
}

// DatabaseMock_GetEngine_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEngine'
type DatabaseMock_GetEngine_Call struct {
	*mock.Call
}

// GetEngine is a helper method to define mock.On call
//   - ctx context.Context
func (_e *DatabaseMock_Expecter) GetEngine(ctx interface{}) *DatabaseMock_GetEngine_Call {
	return &DatabaseMock_GetEngine_Call{Call: _e.mock.On("GetEngine", ctx)}
}

func (_c *DatabaseMock_GetEngine_Call) Run(run func(ctx context.Context)) *DatabaseMock_GetEngine_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *DatabaseMock_GetEngine_Call) Return(_a0 drivers.Driver) *DatabaseMock_GetEngine_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DatabaseMock_GetEngine_Call) RunAndReturn(run func(context.Context) drivers.Driver) *DatabaseMock_GetEngine_Call {
	_c.Call.Return(run)
	return _c
}

// Vacuum provides a mock function with given fields: ctx, tx
func (_m *DatabaseMock) Vacuum(ctx context.Context, tx *sql.Tx) error {
	ret := _m.Called(ctx, tx)

	if len(ret) == 0 {
		panic("no return value specified for Vacuum")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx) error); ok {
		r0 = rf(ctx, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DatabaseMock_Vacuum_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Vacuum'
type DatabaseMock_Vacuum_Call struct {
	*mock.Call
}

// Vacuum is a helper method to define mock.On call
//   - ctx context.Context
//   - tx *sql.Tx
func (_e *DatabaseMock_Expecter) Vacuum(ctx interface{}, tx interface{}) *DatabaseMock_Vacuum_Call {
	return &DatabaseMock_Vacuum_Call{Call: _e.mock.On("Vacuum", ctx, tx)}
}

func (_c *DatabaseMock_Vacuum_Call) Run(run func(ctx context.Context, tx *sql.Tx)) *DatabaseMock_Vacuum_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sql.Tx))
	})
	return _c
}

func (_c *DatabaseMock_Vacuum_Call) Return(_a0 error) *DatabaseMock_Vacuum_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DatabaseMock_Vacuum_Call) RunAndReturn(run func(context.Context, *sql.Tx) error) *DatabaseMock_Vacuum_Call {
	_c.Call.Return(run)
	return _c
}

// NewDatabaseMock creates a new instance of DatabaseMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDatabaseMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *DatabaseMock {
	mock := &DatabaseMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
