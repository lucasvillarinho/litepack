// Code generated by mockery v2.47.0. DO NOT EDIT.

package mocks

import (
	cron "github.com/robfig/cron/v3"

	mock "github.com/stretchr/testify/mock"
)

// CronMock is an autogenerated mock type for the Cron type
type CronMock struct {
	mock.Mock
}

type CronMock_Expecter struct {
	mock *mock.Mock
}

func (_m *CronMock) EXPECT() *CronMock_Expecter {
	return &CronMock_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: schedule, task
func (_m *CronMock) Add(schedule string, task func()) (cron.EntryID, error) {
	ret := _m.Called(schedule, task)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 cron.EntryID
	var r1 error
	if rf, ok := ret.Get(0).(func(string, func()) (cron.EntryID, error)); ok {
		return rf(schedule, task)
	}
	if rf, ok := ret.Get(0).(func(string, func()) cron.EntryID); ok {
		r0 = rf(schedule, task)
	} else {
		r0 = ret.Get(0).(cron.EntryID)
	}

	if rf, ok := ret.Get(1).(func(string, func()) error); ok {
		r1 = rf(schedule, task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CronMock_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type CronMock_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - schedule string
//   - task func()
func (_e *CronMock_Expecter) Add(schedule interface{}, task interface{}) *CronMock_Add_Call {
	return &CronMock_Add_Call{Call: _e.mock.On("Add", schedule, task)}
}

func (_c *CronMock_Add_Call) Run(run func(schedule string, task func())) *CronMock_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(func()))
	})
	return _c
}

func (_c *CronMock_Add_Call) Return(_a0 cron.EntryID, _a1 error) *CronMock_Add_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CronMock_Add_Call) RunAndReturn(run func(string, func()) (cron.EntryID, error)) *CronMock_Add_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function with given fields: entryID
func (_m *CronMock) Remove(entryID cron.EntryID) {
	_m.Called(entryID)
}

// CronMock_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type CronMock_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - entryID cron.EntryID
func (_e *CronMock_Expecter) Remove(entryID interface{}) *CronMock_Remove_Call {
	return &CronMock_Remove_Call{Call: _e.mock.On("Remove", entryID)}
}

func (_c *CronMock_Remove_Call) Run(run func(entryID cron.EntryID)) *CronMock_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(cron.EntryID))
	})
	return _c
}

func (_c *CronMock_Remove_Call) Return() *CronMock_Remove_Call {
	_c.Call.Return()
	return _c
}

func (_c *CronMock_Remove_Call) RunAndReturn(run func(cron.EntryID)) *CronMock_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields:
func (_m *CronMock) Start() {
	_m.Called()
}

// CronMock_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type CronMock_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *CronMock_Expecter) Start() *CronMock_Start_Call {
	return &CronMock_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *CronMock_Start_Call) Run(run func()) *CronMock_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CronMock_Start_Call) Return() *CronMock_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *CronMock_Start_Call) RunAndReturn(run func()) *CronMock_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields:
func (_m *CronMock) Stop() {
	_m.Called()
}

// CronMock_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type CronMock_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *CronMock_Expecter) Stop() *CronMock_Stop_Call {
	return &CronMock_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *CronMock_Stop_Call) Run(run func()) *CronMock_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CronMock_Stop_Call) Return() *CronMock_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *CronMock_Stop_Call) RunAndReturn(run func()) *CronMock_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// NewCronMock creates a new instance of CronMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCronMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *CronMock {
	mock := &CronMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
