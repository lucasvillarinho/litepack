// Code generated by mockery v2.47.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// LoggerMock is an autogenerated mock type for the Logger type
type LoggerMock struct {
	mock.Mock
}

type LoggerMock_Expecter struct {
	mock *mock.Mock
}

func (_m *LoggerMock) EXPECT() *LoggerMock_Expecter {
	return &LoggerMock_Expecter{mock: &_m.Mock}
}

// Error provides a mock function with given fields: ctx, msg
func (_m *LoggerMock) Error(ctx context.Context, msg string) {
	_m.Called(ctx, msg)
}

// LoggerMock_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type LoggerMock_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
//   - ctx context.Context
//   - msg string
func (_e *LoggerMock_Expecter) Error(ctx interface{}, msg interface{}) *LoggerMock_Error_Call {
	return &LoggerMock_Error_Call{Call: _e.mock.On("Error", ctx, msg)}
}

func (_c *LoggerMock_Error_Call) Run(run func(ctx context.Context, msg string)) *LoggerMock_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *LoggerMock_Error_Call) Return() *LoggerMock_Error_Call {
	_c.Call.Return()
	return _c
}

func (_c *LoggerMock_Error_Call) RunAndReturn(run func(context.Context, string)) *LoggerMock_Error_Call {
	_c.Call.Return(run)
	return _c
}

// NewLoggerMock creates a new instance of LoggerMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLoggerMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *LoggerMock {
	mock := &LoggerMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
